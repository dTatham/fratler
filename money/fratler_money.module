<?php
/**
 * @file
 * A bookkeping solution; part of the fratler-Suite (www.fratler.de)
 * (c) 2012 Daniel Zauner
 */

// Set the locale for formatting numbers
setlocale(LC_MONETARY, variable_get('fm_locale', 'C'));
$fm_locale = localeconv();


function fratler_money_permission() {
	return array(
		'fm transfer own'	=> array(
			'title'		=> t('Transfer own funds'),
			'description' 	=> t('User may transfer own funds.'),
		),
		'fm transfer exceed limit' => array(
			'title'		=> t('Exceed transaction limit'),
			'description'	=> t('Permit this role to exceed the set per-transaction limit.'),
		),
		'fm transfer non-participants' => array(
			'title' 	=> t('Transfer to non-participants'),
			'description'	=> t('Users may conduct transactions with roles that are not allowed to participate.'),
			'restrict access' => true,
		),
		'fm transfer other-accounts' => array(
			'title'		=> t('Transfer from other accounts'),
			'description'	=> t('Permit transactions away from other accounts'),
			'restrict access' => true,
		),
		'fm overdraw' 		=> array(
			'title'		=> t('Overdraw account'),
			'description'	=> t('Users of this role may overdraw their accounts past the limit set in the configuration.'),
			'restrict access' => true,
		),
		'fm view own'		=> array(
			'title'		=> t('View own account'),
			'description'	=> t('Allow users to see their own transaction'),
		),
		'fm view other'		=> array(
			'title'		=> t('View other accounts'),
			'description'	=> t('Allow user to view other users\'s accounts'),
		),

	);
}

/**
 * Implements hook_menu()
 */
function fratler_money_menu() {
	$itmes = array();

	// Admin-Page
	$items['admin/config/fratler/money'] = array(
		'title'		=> 'Fratler Money',
		'description'	=> 'Configure the fratler_suite bookkeeping',
		'page callback'	=> 'drupal_get_form',
		'page arguments' => array('fratler_money_admin_form'),
		'access arguments' => array('access administration pages'),
		'file'		=> 'fm_admin.inc',
	);

	// Regular transfer
	$items['fratler/money/transfer'] = array(
		'title'		=> t('Transfer funds'),
		'page callback'	=> 'drupal_get_form',
		'page arguments' => array('fm_transfer'),
		'access arguments' => array('fm transfer own'),
		'file'		=> 'fm_transfer.inc',
		'type'		=> MENU_NORMAL_ITEM,
		'menu_name'	=> 'user-menu',
	);
	$items['fratler/money/transfer/normal'] = array(
		'title'		=> t('Standard transaction'),
		'type'		=> MENU_DEFAULT_LOCAL_TASK,
	);

	// Account adjustment
	$items['fratler/money/transfer/adjust'] = array(
		'title'		=> t('Adjust account'),
#		'page callback'	=> 'drupal_get_form',
		'page arguments' => array('fm_transfer', 'adjust'),
		'access arguments' => array('fm adjust'),
#		'file'		=> 'fm_adjust.inc',
		'type'		=> MENU_LOCAL_TASK,
		'weight'	=> 30,
	);

	// Display a single transaction sheet
	$items['fratler/money/display/%'] = array(
		'title'		=> t('Transaction details'),
		'page callback'	=> '_fm_display_single',
		'page arguments' => array(3),
		'access callback' => '_fm_access',
		'access arguments' => array('fm view own', 'fm view other', 'fm transfer own', 'fm transfer other'),	// first level check, 2nd level in function
	);

	// Display account statement
	$items['user/%user/fm_statement'] = array(
		'title' => 'Account Statement',
		'description' => t('Account statements'),
		'page callback' => '_fm_user_display',
		'page arguments' => array(1), 
		'access callback' => '_fm_access',
		'access arguments' => array('fm_statement',1), // permission
		'type' => MENU_LOCAL_TASK,
	);

	// Account-Statement Callback
	$items['fratler/callback/money/statement/%user_uid_optional'] = array(
		'title'		=> 'Account statement AJAX Callback',
		'page callback'	=> '_fm_user_display_callback',
		'page arguments' => array(4),
		'access callback' => '_fm_access',
		'access arguments' => array('fm_statement', 4),
		'type' 		=> MENU_CALLBACK,
		'file'		=> 'fm_callbacks.inc',
	);

	// User-Completion Callback
	$items['fratler/callback/money/transfer'] = array(
		'title'		=> 'User Autocomplete',
		'page callback'	=> '_fm_autocomplete',
		'access callback' => '_fm_access',
		'access arguments' => array('fm view other', 'fm view own'),
		'type'		=> MENU_CALLBACK,
		'file'		=> 'fm_callbacks.inc',
	);


	return $items;
}

/**
 * Implements hook_help
 *
 * Displays help and module information.
 *
 * @param path
 * 	Which path of the site we're using to display help
 * @param arg 
 * 	Array that holds the current path as returned from arg() function
 */
function fratler_money_help($path, $arg) {
	switch ($path) { 
	case 'admin/help#fratler_money':
		return '<p>' . t('A bookkeeping solution') . '</p>';
		break;
	}
}

/**
 * Checks multiple permissions
 *
 * @see user_access
 *
 * @param args
 * 	one or more user-permissions
 */
function _fm_access() {
	if (func_num_args() == 2 && is_object(func_get_arg(1))) {
		global $user;

		switch (func_get_arg(0)) {
			case 'fm_statement':
				$account = func_get_arg(1);
				if ($user->uid == $account->uid && user_access('fm view own')) 
					return true;
				else if (user_access('fm view other')) 
					return true;
			default:
				return false;
		}
	} else
		foreach (func_get_args() as $arg) 
			if (user_access($arg))
				return true;
	return false;
}

class fm_transaction_detail {
	public $rid_data;
	public $sid_data;
	public $iid_data;
	public $adjust = false;

	function __construct() {
		if (!function_exists('_fm_strip'))
			module_load_include('inc', 'fratler_money', 'fm_tools');
		$this->rid_data = user_load($this->rid);
		if ($this->sid == 0)
			$this->adjust = true;
		else
			$this->sid_data = user_load($this->sid);

		if ($this->iid != 0)
			$this->iid_data = user_load($this->iid);
		else	$this->iid_data = false;
	}

	function check_signature() {
		return openssl_verify(_fm_hash_prepare($this->rid, $this->sid, $this->iid, $this->type, $this->amount, $this->text, $this->balance, $this->timestamp), $this->signature, variable_get('fc_key_public'));
	}

}

/**
 * Show a single Statement
 * Formatting will be done depending on who's requesting what transaction.
 * If the current user is part of this transaction (sender / recipient), it will show the transaction from his perspective.
 * If it's a 3rd party to 3rd party transaction that's initiated by the user, it will show the combined incoming / outgoing transaction, and the respective new balances (if allowed)
 *
 * @param hash
 * 	The transaction-Hash
 */
function _fm_display_single($hash) {
	if (!function_exists('_fm_strip'))
		module_load_include('inc', 'fratler_money', 'fm_tools');

	global $user;
	
	$res = db_query('SELECT * from {fratler_money} WHERE fingerprint = :hash ORDER BY tid ASC LIMIT 2', array(':hash' => $hash), array('fetch' => 'fm_transaction_detail'));
	// Fetch first data-set (if available...)
	$trans = $res->fetch();
	if ($trans == false || ($trans->sid != $user->uid && $trans->rid != $user->uid && $trans->iid != $user->uid && !user_access('fm view other'))) 	
		// Transaction is empty, 
		// Current user was neither sender, recipient nor initiator, therefore not allowed to view this, unless he has the proper permission
		die(drupal_not_found());
	// If current user is the sender, fetch the second data-set
	
	$header = array(
		'sid' 	=> array('data' => t('Sender'), 'class' => array('fm_header')),	
		'rid'	=> array('data' => $trans->adjust ? t('Account') :  t('Recipient'), 'class' => array('fm_header')),
		'type'	=> array('data' => t('Type'), 'class' => array('fm_header')),
		'text'	=> array('data' => t('Message'), 'class' => array('fm_message')), 
		'amount' => array('data' => t('Amount'), 'class' => array('fm_header')),
		'balance' => array('data' => t('New balance'), 'class' => array('fm_header')),
		'print'	=> array('data' => t('Fingerprint'), 'class' => array('fm_header')),
		'sign'	=> array('data' => t('Signature'), 'class' => array('fm_header')),
		);

	// Do some cosmetics
	if ($trans->sid != $user->uid && $trans->rid != $user->uid && !user_access('fm view other'))		// If viewing a third-party to third-party transaction and the user is not allowed to view other accounts, drop the "balance";
		unset($header['balance']);
	if ($trans->adjust)
		unset($header['sid']);
	
	$row0 = array();
	$row1 = array();
	$split = false;

	if ($trans->iid == $user->uid && !$trans->adjust) // We have some funny-business - split rows in 2
		$split = true;
	if (!$trans->adjust)	$row0['sid'] = format_username($trans->sid_data);
	if ($split) 	$row1['sid'] = ''; 

	if ($split) { 	$row1['rid'] = format_username($trans->rid_data); $row0['rid'] = ''; } 
	else 		$row0['rid'] = format_username($trans->rid_data);

			$row0['type'] = array('data' => taxonomy_term_load($trans->type)->name, 'rowspan' => $split ? 2 : 1);

			$row0['text'] = array('data' => ($trans->iid != 0 ? t('By') . ': ' . format_username(user_load($trans->iid)) . '<br />' : '') . _fm_strip_html($trans->text), 'rowspan' => $split ? 2 : 1);

	if ($split)	$row1['amount'] = array('data' => money_format("%n", $trans->amount), 'class' => array('fm_amount', ($trans->amount > 0) ? 'fm_credit' : 'fm_debit'));
	if ($split && isset($header['balance']))	$row1['balance'] = array('data' => money_format("%n", $trans->balance), 'class' => array('fm_amount', ($trans->balance > 0) ? 'fm_credit' : 'fm_debit'));
			// Fingerprint will be set by the 2nd row (rowspan)	
	//
	if ($split)	$row1['signature'] = array('data' => $trans->check_signature() ? 'OK' : 'ERROR');

	// If it's a (regular) two-way transaction, swap the remaining transaction data
	if (($trans->sid == $user->uid || $trans->iid == $user->uid) && $trans->sid != 0)
		$trans = $res->fetch();

	$row0['amount'] = array('data' => money_format("%n", $trans->amount), 'class' => array('fm_amount', ($trans->amount > 0) ? 'fm_credit' : 'fm_debit'));

	if (isset($header['balance']))		$row0['balance'] = array('data' => money_format("%n", $trans->balance), 'class' => array('fm_amount', ($trans->balance > 0) ? 'fm_credit' : 'fm_debit'));

	$row0['fingerprint'] = array('data' => hash('crc32b', $trans->fingerprint), 'rowspan' => $split ? 2 : 1);
	$row0['signature'] = array('data' => $trans->check_signature() ? 'OK' : 'ERROR');


	$data	= array(
		'header' 	=> $header,
		'rows'		=> array($row0, $row1),
		'attributes'	=> array('class' => array('fm_singlet')),
		'caption'	=> '',
		'sticky'	=> true,
		'colgroups'	=> array(),
		'empty'		=> t('No transactions available'),
	);
	$html = theme_table($data);
	
	return $html;
}


/**
 * Display user's account statement
 *
 * @param uid
 * 	the user-account
 */
function _fm_user_display($uid) {
	global $user;
	
	drupal_add_js(drupal_get_path('module', 'fratler_money') . '/scripts/fratler.callback.js', array('weight' => 5));
	drupal_add_js(drupal_get_path('module', 'fratler_money') . '/scripts/jquery.ui.js', array('weight' => 5));
	drupal_add_js('initializeTable(' . $uid->uid . ');', array('type' => 'inline', 'weight' => 6));


	$page_array['fm_statement_arguments'] = array(
		'#markup' =>  '<div id="table-container"></div>',
	);
	return $page_array;
}

